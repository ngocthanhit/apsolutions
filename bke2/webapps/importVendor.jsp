<%@ page language="java" import="com.intuit.quickbase.util.*,com.bke1.util.*" %><%@ page import="ibizqb.*"%> <%@ page buffer="256kb"%>  <%@ page import="java.util.*"%><%@ page import="java.text.SimpleDateFormat"%>      <%@ page import="java.lang.reflect.Array"%>  <%@ page import="org.w3c.dom.Document"%>  <%@ page import="org.xml.sax.InputSource"%>  <%@ page import="org.w3c.dom.Element"%>  <%@ page import="org.w3c.dom.NodeList"%>  <%@ page import="org.w3c.dom.Node"%> <%@ include file="include.jsp" %> <%  		String strURL = "https://docorganiz.quickbase.com/db/";			String vid = request.getParameter("vid");		String s4 = "sortorder-AD";		ServletContext context = this.getServletContext() ;  		String vendorTableId = context.getInitParameter( "vendorTableId" );			String u = "QuickBaseAdmin@docorganiz.com";		String p = "QBadd1234#*";				int quickBooksCount = 0;		int quickBaseCount = 0;		int insertCount = 0;		int quickBaseCountInsert = 0;		  		System.out.println("user name"+u);		System.out.println("password"+p);		System.out.println("inside import vendor"); 		  		QuickBaseClient qdb12 = new QuickBaseClient(u ,p , strURL);    Vector vector = qdb12.doQuery(vendorTableId, "{12.EX.'"+vid+"'}", "7.11.14.21.26.3.8.25", "7", s4);				   	//getting the client id from  quickbooks	  final javax.servlet.jsp.JspWriter ps = out;		Objsearch search1 = new Objsearch();		Vendor vendor1 = new Vendor();	      		vendor1.setQBConnectionString("URL='http://10.100.42.85:2080'");		search1.setQBConnectionString("URL='http://10.100.42.85:2080'");		search1.reset();		search1.setQueryType(1);		search1.setActiveStatus(3);				search1.setNameContains("");			 //Only return a maximum of 40 results	 search1.setMaxResults(1000);  	 String vendorNameBooks[] = new String[40];    	 int insert = 0;	 search1.search();		 HashMap infoHash = new  HashMap();	 HashMap infoHash2 = new  HashMap();	 HashMap infoHash3 = new  HashMap();	 String primaryKey ="";	 String primaryKey1 ="";   String vendorBooks = null;	 String vendorAccountType = null;	 String vendorAccountName = null;	 	 String vendorPaymentTermsBoooks = null;	 String vendorCreditLimitBooks = null;	 String vendorPaymentTermsBase = null;	 String vendorCreditLimitBase = null;	 String vendorIsInactive = null;	 String vendorCompanyName = null;   String vendorVendorName = null;	 String vendorAccountNumber = null;	 boolean activeFlagBooks = true;		 HashMap hashmap1 = null;	 String vendorTypeBase = null;	 String accountNumberBase = null;	 String activeFlagBase = null;	 String vendorNameBase = null;	 String companyNameBase = null;	 String vendorBase = null;	 String vendorTypeBooks = null;	 String headerID = null;	 String accountNumberBooks = null;	 String companyNameBooks = null;	 int creditLimitBooks = 0;	 	 	 	 	 if(vector.size()==0){	 System.out.println("vector size is 0****************");	 		 for (int i = 0; i< search1.getResultCount(); i++) 					 {						vendor1.reset();						vendor1.setQBResponseAggregate(search1.getResultAggregate(i));						   										 						vendorVendorName = vendor1.getVendorName();												activeFlagBooks = vendor1.isIsActive();																				 					//	System.out.println("******vendor Books*****"+vendorVendorName);						infoHash.put(String.valueOf(7),vendorVendorName);						 infoHash.put(String.valueOf(12),vid);						 infoHash.put(String.valueOf(11),vendor1.getCompanyName());						 //System.out.println("*************Acc no"+vendor1.getAccountNumber());						 infoHash.put(String.valueOf(14),vendor1.getAccountNumber());						 infoHash.put(String.valueOf(21),vendor1.getVendorTypeName());						 infoHash.put(String.valueOf(8),vendor1.getTermsName());						 //System.out.println("*******payment terms from QB"+vendor1.getTermsName());						 infoHash.put(String.valueOf(25),String.valueOf(vendor1.getCreditLimit()/100));						 //infoHash.put(String.valueOf(26),String.valueOf(vendor1.isIsActive()));						 						 if(activeFlagBooks){						 infoHash.put(String.valueOf(26),"0");						 }						 else{						 infoHash.put(String.valueOf(26),"1");						 }						 System.out.println("Hash"+infoHash);						 primaryKey = qdb12.addRecord(vendorTableId,infoHash);						 System.out.println("primary key"+primaryKey);						 						 }	 }	 	else{						System.out.println("vector size not equal to 0");					System.out.println("search result size"+search1.getResultCount());				 for (int i = 0; i< search1.getResultCount(); i++) 				 {						vendor1.reset();						vendor1.setQBResponseAggregate(search1.getResultAggregate(i));					   										 						vendorVendorName = vendor1.getVendorName();						vendorTypeBooks = vendor1.getVendorTypeName();						accountNumberBooks = vendor1.getAccountNumber();						companyNameBooks = vendor1.getCompanyName();						vendorPaymentTermsBoooks = vendor1.getTermsName();						vendorCreditLimitBooks = String.valueOf(vendor1.getCreditLimit());																							activeFlagBooks = vendor1.isIsActive();											//System.out.println("*********active flag books"+activeFlagBooks);													 						//System.out.println("******vendor Books*****"+vendorVendorName);						//System.out.println("***********"+vector.size());						int a=0;												for(int j = 0; j <= vector.size() - 1; j++)			      	{								         hashmap1 = (HashMap)vector.elementAt(j);			         Iterator iterator = hashmap1.values().iterator();			      	 while (iterator.hasNext())					 			{					 				System.out.println("true"+iterator.hasNext());					   			vendorTypeBase = (String)iterator.next();					   			headerID = (String)iterator.next();					   			accountNumberBase = (String)iterator.next();					   			activeFlagBase = (String)iterator.next();					   			vendorPaymentTermsBase = (String)iterator.next();           	 			companyNameBase = (String)iterator.next();           	 			vendorCreditLimitBase = (String)iterator.next();					   			vendorBase = (String)iterator.next();					   								   			/*System.out.println("1"+vendorBase);           				System.out.println("2"+(String)iterator.next());           				System.out.println("3"+(String)iterator.next());           				System.out.println("4"+(String)iterator.next());           				//paymenmt terms           				System.out.println("5"+(String)iterator.next());           				System.out.println("6"+(String)iterator.next());           				//credit limit           				System.out.println("7"+(String)iterator.next());           				System.out.println("8"+(String)iterator.next());*/					   								   			System.out.println("***activeFlagBooks************"+activeFlagBooks);					   			System.out.println("***activeFlagBase************"+activeFlagBase);					  					   			//System.out.println("size"+vector.size());					   								   			if(vendorBase.equals(vendorVendorName))					   			{					   									 			//System.out.println("equal*****************");						 			//System.out.println("****accountNumberBooks****"+accountNumberBooks);									 	//		System.out.println("****accountNumberBase****"+accountNumberBase);									 	//System.out.println("vendorPaymentTermsBase"+vendorPaymentTermsBase);								 			//	System.out.println("vendorPaymentTermsBoooks"+vendorPaymentTermsBoooks);						 									 					if(!(vendorPaymentTermsBase.equals(vendorPaymentTermsBoooks)))								 			{								 											 				System.out.println("payment terms not equal");								 				//System.out.println("vendorPaymentTermsBase"+vendorPaymentTermsBase);								 				//System.out.println("vendorPaymentTermsBoooks"+vendorPaymentTermsBoooks);								 				infoHash2.put("8",vendorPaymentTermsBoooks);						  		 		  primaryKey1 = qdb12.editRecord(vendorTableId, infoHash2,headerID );						  		 		  System.out.println("Updated payment terms type "+headerID);	  		 										  		 		  	  		 														 			}								 											 			if(!(vendorCreditLimitBase.equals(vendorCreditLimitBooks)))								 			{								 				System.out.println("credit limit not equal");								 				//System.out.println("vendorCreditLimitBase"+vendorCreditLimitBase);								 				//System.out.println("vendorCreditLimitBooks"+vendorCreditLimitBooks);								 				infoHash2.put("25",vendorCreditLimitBooks);						  		 		  primaryKey1 = qdb12.editRecord(vendorTableId, infoHash2,headerID );						  		 		  System.out.println("Updated credit limit "+headerID);						  		 		  	  		 														 			}							 				if(!(vendorTypeBooks.equals(vendorTypeBase)))							 				{								 				System.out.println("vendor type not equal");						  		 		  infoHash2.put("21",vendorTypeBooks);						  		 		  primaryKey1 = qdb12.editRecord(vendorTableId, infoHash2,headerID );						  		 		  System.out.println("Updated vendor type "+headerID);	  		 													 				}							 											 												 			if(!(accountNumberBooks.equals(accountNumberBase)))								 			{									 			System.out.println("account number not equal");									 										  		 		infoHash2.put("14",accountNumberBooks);							  		 		primaryKey1 = qdb12.editRecord(vendorTableId, infoHash2,headerID );							  		 		System.out.println("Account Number "+headerID);	  		 														 			}							 												 			if(!(companyNameBooks.equals(companyNameBase)))								 			{								 				System.out.println("company name not equal");						  		 		  infoHash2.put("11",companyNameBooks);						  		 		  primaryKey1 = qdb12.editRecord(vendorTableId, infoHash2,headerID );						  		 		  System.out.println("company name "+headerID);	  		 														 			}							 												 			if(activeFlagBooks == true)								 			{				  		 									  		 		//System.out.println("active flag is true***********");				  		 										  		 	if(activeFlagBase.equals("1") || activeFlagBase.equals(""))								  			{								  		 			System.out.println("***********active***********");								  		 			infoHash2.put("26","0");								  		 			primaryKey1 = qdb12.editRecord(vendorTableId, infoHash2,headerID );								  		 			System.out.println("primaryKey1 "+primaryKey1);								  		 			System.out.println("Updated activate flag "+headerID);								  		 											  		 	}								  		 }								  		 else						  		 		 {						  		 			System.out.println("deactive***********");				  		 								  		 			if(activeFlagBase.equals("0") || activeFlagBase.equals(""))						  		 			{							  		 				System.out.println("***********deactivate");							  		 				infoHash2.put("26","1");							  		 				primaryKey1 = qdb12.editRecord(vendorTableId, infoHash2,headerID );							  		 				System.out.println("primaryKey1 "+primaryKey1);							  		 				System.out.println("Updated activate flag "+headerID);							  		 											  		 		}							  		   }								  		 							 									 			break;					  		 	}									else									{									// System.out.println("******vendor Books*****"+vendorNameBooks[j]);									a++;									//System.out.println("a **********" +a);																					//System.out.println("vector.size()" +vector.size());									//System.out.println("check()" +(a==vector.size()));									if(a==vector.size())									{											 System.out.println("inside if@@@@@@@@@@@@@@@@@@@@@@@@@");											 infoHash.put(String.valueOf(7),vendorVendorName);											 infoHash.put(String.valueOf(12),vid);											 infoHash.put(String.valueOf(11),vendor1.getCompanyName());											 infoHash.put(String.valueOf(14),vendor1.getAccountNumber());											 infoHash.put(String.valueOf(21),vendor1.getVendorTypeName());											 infoHash.put(String.valueOf(8),vendor1.getTermsName());											 //System.out.println("*******payment terms from QB"+vendor1.getTermsName());											 infoHash.put(String.valueOf(25),String.valueOf(vendor1.getCreditLimit()/100));											 if(activeFlagBooks){											  System.out.println("*******Books isActive flag Should be TRUE but it is"+activeFlagBooks);											 	infoHash.put(String.valueOf(26),"1");											 }else{											  System.out.println("*******Books isActive flag Should be FALSE but it is"+activeFlagBooks);											 	infoHash.put(String.valueOf(26),"0");											 }																						 primaryKey = qdb12.addRecord(vendorTableId,infoHash);											 System.out.println("primary key"+primaryKey);								    		}  	// end if																											   }// end else							   				      		}//end while				     }//end for							 														 			         						}// end for										quickBooksCount = search1.getResultCount();						quickBaseCount = vector.size();						insertCount = (infoHash.size())/6;						quickBaseCountInsert = quickBaseCount + insertCount;						System.out.println("quickBooksCount "+quickBooksCount);						System.out.println("quickBaseCount"+quickBaseCount);					  //System.out.println("Hash"+infoHash.size());					  if(quickBaseCountInsert>quickBooksCount){						  	 							 						for(int j = 0; j <= vector.size() - 1; j++)			      	{								         hashmap1 = (HashMap)vector.elementAt(j);			         Iterator iterator = hashmap1.values().iterator();			      	 while (iterator.hasNext())					 			{					 				 					   			vendorTypeBase = (String)iterator.next();					   			headerID = (String)iterator.next();					   			accountNumberBase = (String)iterator.next();					   			activeFlagBase = (String)iterator.next();					   			vendorPaymentTermsBoooks = (String)iterator.next();           	 			companyNameBase = (String)iterator.next();           	 			vendorCreditLimitBooks = (String)iterator.next();					   			vendorBase = (String)iterator.next();					   								   							  					   			//System.out.println("size"+vector.size());					   			 int b = 0;			 						 for (int i = 0; i< search1.getResultCount(); i++) 							 			{											vendor1.reset();											vendor1.setQBResponseAggregate(search1.getResultAggregate(i));								   										 											vendorVendorName = vendor1.getVendorName();											//System.out.println("***Name***"+vendorVendorName);											if(vendorBase.equals(vendorVendorName)){																						break;											}											else{					   				  	b++;					   				  					   				  	if(b==search1.getResultCount())												{												System.out.println("************not equal");												infoHash3.put("27","1");							  		 		primaryKey1 = qdb12.editRecord(vendorTableId, infoHash3,headerID );							  		 		System.out.println("primaryKey1 "+primaryKey1);							  		 		System.out.println("***************deactivated************ "+headerID);																	   				  	}																						}																					}																			}																		}															  					  }		}						response.sendRedirect("https://docorganiz.quickbase.com/db/bes8a4tgn?a=q&qid=22&nv=1&v0=BK001");								%>